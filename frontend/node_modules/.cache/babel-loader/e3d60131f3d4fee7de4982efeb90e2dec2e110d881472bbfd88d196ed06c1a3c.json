{"ast":null,"code":"var _jsxFileName = \"/home/morpole/Desktop/todo/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './index.css';\n\n// const TodoApp = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('/api/tasks');\n//       setTasks(response.data.reverse());\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask.trim()) return;\n//     try {\n//       await axios.post('/api/tasks', { description: newTask });\n//       setNewTask('');\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const toggleCompletion = async (taskId, completed) => {\n//     try {\n//       await axios.patch(`/api/tasks/${taskId}`, { completed: !completed });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await axios.delete(`/api/tasks/${taskId}`);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const startEditing = (task) => {\n//     setEditingTask({ ...task });\n//   };\n\n//   const updateTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.patch(`/api/tasks/${editingTask._id}`, { description: editingTask.description });\n//       setEditingTask(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//     <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\n//     <div className=\"container mx-auto p-4 max-w-2xl\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Todo App</h1>\n//       <form onSubmit={addTask} className=\"mb-4\">\n//         <input\n//           type=\"text\"\n//           value={newTask}\n//           onChange={(e) => setNewTask(e.target.value)}\n//           placeholder=\"Add a new task\"\n//           className=\"p-2 border rounded w-full\"\n//         />\n//         <button type=\"submit\" className=\"mt-2 button-submit text-white p-2 rounded\">Add Task</button>\n//       </form>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task._id} className=\"mb-2 p-2 border rounded\">\n//             {editingTask && editingTask._id === task._id ? (\n//               <form onSubmit={updateTask}>\n//                 <input\n//                   type=\"text\"\n//                   value={editingTask.description}\n//                   onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}\n//                   className=\"p-1 border rounded w-full\"\n//                 />\n//                 <button type=\"submit\" className=\"mt-1 bg-green-500 text-white p-1 rounded\">Save</button>\n//                 <button onClick={() => setEditingTask(null)} className=\"mt-1 ml-1 bg-gray-500 text-white p-1 rounded\">Cancel</button>\n//               </form>\n//             ) : (\n//               <>\n//                 <span className={task.completed ? 'line-through' : ''}>{task.description}</span>\n//                 <button onClick={() => toggleCompletion(task._id, task.completed)} className=\"ml-2 bg-yellow-500 text-white p-1 rounded\">\n//                   {task.completed ? 'Undo' : 'Complete'}\n//                 </button>\n//                 <button onClick={() => startEditing(task)} className=\"ml-2 bg-blue-500 text-white p-1 rounded\">Edit</button>\n//                 <button onClick={() => deleteTask(task._id)} className=\"ml-2 bg-red-500 text-white p-1 rounded\">Delete</button>\n//               </>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default TodoApp;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  // Add your useEffect for loading tasks here\n\n  const addTask = e => {\n    e.preventDefault();\n    // Add task logic\n  };\n  const toggleComplete = id => {\n    // Toggle complete logic\n  };\n  const deleteTask = id => {\n    // Delete task logic\n  };\n  const editTask = (id, newDescription) => {\n    // Edit task logic\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTask,\n        onChange: e => setNewTask(e.target.value),\n        placeholder: \"Add a new task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleComplete(task.id),\n          children: task.completed ? '✓' : '○'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: task.completed ? 'completed' : '',\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editTask(task.id, task.description),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTask(task.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MMRu7H+sKP7rEuK8M8zT6HaT89w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","newTask","setNewTask","addTask","e","preventDefault","toggleComplete","id","deleteTask","editTask","newDescription","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","map","task","onClick","completed","description","_c","$RefreshReg$"],"sources":["/home/morpole/Desktop/todo/frontend/src/App.js"],"sourcesContent":["\n\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import './index.css';\n\n\n// const TodoApp = () => {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   useEffect(() => {\n//     fetchTasks();\n//   }, []);\n\n//   const fetchTasks = async () => {\n//     try {\n//       const response = await axios.get('/api/tasks');\n//       setTasks(response.data.reverse());\n//     } catch (error) {\n//       console.error('Error fetching tasks:', error);\n//     }\n//   };\n\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask.trim()) return;\n//     try {\n//       await axios.post('/api/tasks', { description: newTask });\n//       setNewTask('');\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const toggleCompletion = async (taskId, completed) => {\n//     try {\n//       await axios.patch(`/api/tasks/${taskId}`, { completed: !completed });\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task completion:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await axios.delete(`/api/tasks/${taskId}`);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const startEditing = (task) => {\n//     setEditingTask({ ...task });\n//   };\n\n//   const updateTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.patch(`/api/tasks/${editingTask._id}`, { description: editingTask.description });\n//       setEditingTask(null);\n//       fetchTasks();\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//     <div className=\"bg-gray-800 p-4 flex items-center justify-between\">\n//     <div className=\"container mx-auto p-4 max-w-2xl\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Todo App</h1>\n//       <form onSubmit={addTask} className=\"mb-4\">\n//         <input\n//           type=\"text\"\n//           value={newTask}\n//           onChange={(e) => setNewTask(e.target.value)}\n//           placeholder=\"Add a new task\"\n//           className=\"p-2 border rounded w-full\"\n//         />\n//         <button type=\"submit\" className=\"mt-2 button-submit text-white p-2 rounded\">Add Task</button>\n//       </form>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task._id} className=\"mb-2 p-2 border rounded\">\n//             {editingTask && editingTask._id === task._id ? (\n//               <form onSubmit={updateTask}>\n//                 <input\n//                   type=\"text\"\n//                   value={editingTask.description}\n//                   onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}\n//                   className=\"p-1 border rounded w-full\"\n//                 />\n//                 <button type=\"submit\" className=\"mt-1 bg-green-500 text-white p-1 rounded\">Save</button>\n//                 <button onClick={() => setEditingTask(null)} className=\"mt-1 ml-1 bg-gray-500 text-white p-1 rounded\">Cancel</button>\n//               </form>\n//             ) : (\n//               <>\n//                 <span className={task.completed ? 'line-through' : ''}>{task.description}</span>\n//                 <button onClick={() => toggleCompletion(task._id, task.completed)} className=\"ml-2 bg-yellow-500 text-white p-1 rounded\">\n//                   {task.completed ? 'Undo' : 'Complete'}\n//                 </button>\n//                 <button onClick={() => startEditing(task)} className=\"ml-2 bg-blue-500 text-white p-1 rounded\">Edit</button>\n//                 <button onClick={() => deleteTask(task._id)} className=\"ml-2 bg-red-500 text-white p-1 rounded\">Delete</button>\n//               </>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//     </div>\n//     </div>\n//   );\n// };\n\n// export default TodoApp;\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  // Add your useEffect for loading tasks here\n\n  const addTask = (e) => {\n    e.preventDefault();\n    // Add task logic\n  };\n\n  const toggleComplete = (id) => {\n    // Toggle complete logic\n  };\n\n  const deleteTask = (id) => {\n    // Delete task logic\n  };\n\n  const editTask = (id, newDescription) => {\n    // Edit task logic\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Todo App</h1>\n      <form onSubmit={addTask}>\n        <input\n          type=\"text\"\n          value={newTask}\n          onChange={(e) => setNewTask(e.target.value)}\n          placeholder=\"Add a new task\"\n        />\n        <button type=\"submit\">Add Task</button>\n      </form>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task.id}>\n            <button onClick={() => toggleComplete(task.id)}>\n              {task.completed ? '✓' : '○'}\n            </button>\n            <span className={task.completed ? 'completed' : ''}>{task.description}</span>\n            <div className=\"actions\">\n              <button onClick={() => editTask(task.id, task.description)}>Edit</button>\n              <button onClick={() => deleteTask(task.id)}>Delete</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  ); \n}\n\nexport default App;"],"mappings":";;AAGA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAE1C;;EAEA,MAAMU,OAAO,GAAIC,CAAC,IAAK;IACrBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB;EACF,CAAC;EAED,MAAMC,cAAc,GAAIC,EAAE,IAAK;IAC7B;EAAA,CACD;EAED,MAAMC,UAAU,GAAID,EAAE,IAAK;IACzB;EAAA,CACD;EAED,MAAME,QAAQ,GAAGA,CAACF,EAAE,EAAEG,cAAc,KAAK;IACvC;EAAA,CACD;EAED,oBACEd,OAAA;IAAKe,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBhB,OAAA;MAAAgB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBpB,OAAA;MAAMqB,QAAQ,EAAEd,OAAQ;MAAAS,QAAA,gBACtBhB,OAAA;QACEsB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAElB,OAAQ;QACfmB,QAAQ,EAAGhB,CAAC,IAAKF,UAAU,CAACE,CAAC,CAACiB,MAAM,CAACF,KAAK,CAAE;QAC5CG,WAAW,EAAC;MAAgB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eACFpB,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAAAN,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eACPpB,OAAA;MAAAgB,QAAA,EACGb,KAAK,CAACwB,GAAG,CAAEC,IAAI,iBACd5B,OAAA;QAAAgB,QAAA,gBACEhB,OAAA;UAAQ6B,OAAO,EAAEA,CAAA,KAAMnB,cAAc,CAACkB,IAAI,CAACjB,EAAE,CAAE;UAAAK,QAAA,EAC5CY,IAAI,CAACE,SAAS,GAAG,GAAG,GAAG;QAAG;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACTpB,OAAA;UAAMe,SAAS,EAAEa,IAAI,CAACE,SAAS,GAAG,WAAW,GAAG,EAAG;UAAAd,QAAA,EAAEY,IAAI,CAACG;QAAW;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC7EpB,OAAA;UAAKe,SAAS,EAAC,SAAS;UAAAC,QAAA,gBACtBhB,OAAA;YAAQ6B,OAAO,EAAEA,CAAA,KAAMhB,QAAQ,CAACe,IAAI,CAACjB,EAAE,EAAEiB,IAAI,CAACG,WAAW,CAAE;YAAAf,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACzEpB,OAAA;YAAQ6B,OAAO,EAAEA,CAAA,KAAMjB,UAAU,CAACgB,IAAI,CAACjB,EAAE,CAAE;YAAAK,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxD,CAAC;MAAA,GARCQ,IAAI,CAACjB,EAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASZ,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAClB,EAAA,CAnDQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}