{"ast":null,"code":"var _jsxFileName = \"/home/morpole/Desktop/todo/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Don't forget to import axios\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  // Define the fetchTasks function outside of useEffect so it can be reused\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('/api/tasks');\n      setTasks(response.data.reverse());\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch tasks when the component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const addTask = async e => {\n    e.preventDefault();\n    if (!newTask.trim()) return;\n    try {\n      await axios.post('/api/tasks', {\n        description: newTask\n      });\n      setNewTask(''); // Clear the input after adding a new task\n      fetchTasks(); // Refresh the task list after adding a new one\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  const toggleComplete = async (id, completed) => {\n    try {\n      await axios.patch(`/api/tasks/${id}`, {\n        completed: !completed\n      });\n      fetchTasks(); // Refresh the task list after toggling completion\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n  const deleteTask = async taskId => {\n    try {\n      await axios.delete(`/api/tasks/${taskId}`);\n      fetchTasks(); // Refresh the task list after deleting\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n  const editTask = async (id, newDescription) => {\n    try {\n      await axios.patch(`/api/tasks/${id}`, {\n        description: newDescription\n      });\n      fetchTasks(); // Refresh the task list after editing\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addTask,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTask,\n        onChange: e => setNewTask(e.target.value),\n        placeholder: \"Add a new task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => toggleComplete(task._id, task.completed),\n          children: task.completed ? '✓' : '○'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: task.completed ? 'completed' : '',\n          children: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editTask(task._id, prompt('Edit task:', task.description)),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTask(task._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, task._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bPCx0+2jxyKSWrxqvYM6Q5jItg8=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { PencilIcon, TrashIcon } from '@heroicons/react/24/solid'; // Import Heroicons\n// import './App.css';\n\n// function App() {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('/api/tasks');\n//         setTasks(response.data.reverse());\n//       } catch (error) {\n//         console.error('Error fetching tasks:', error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask.trim()) return;\n//     try {\n//       await axios.post('/api/tasks', { description: newTask });\n//       setNewTask('');\n//       fetchTasks(); // Refresh task list after adding a new one\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const toggleComplete = async (id, completed) => {\n//     try {\n//       await axios.patch(`/api/tasks/${id}`, { completed: !completed });\n//       fetchTasks(); // Refresh task list after toggling complete status\n//     } catch (error) {\n//       console.error('Error toggling task:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await axios.delete(`/api/tasks/${taskId}`);\n//       fetchTasks(); // Refresh task list after deleting\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const startEditing = (task) => {\n//     setEditingTask({ ...task });\n//   };\n\n//   const updateTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.patch(`/api/tasks/${editingTask._id}`, { description: editingTask.description });\n//       setEditingTask(null);\n//       fetchTasks(); // Refresh task list after editing\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container mx-auto p-4 max-w-2xl\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Todo App</h1>\n//       <form onSubmit={addTask} className=\"mb-4\">\n//         <input\n//           type=\"text\"\n//           value={newTask}\n//           onChange={(e) => setNewTask(e.target.value)}\n//           placeholder=\"Add a new task\"\n//           className=\"p-2 border rounded w-full\"\n//         />\n//         <button type=\"submit\" className=\"mt-2 button-submit text-white p-2 rounded\">Add Task</button>\n//       </form>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task._id} className=\"mb-2 p-2 border rounded\">\n//             <div className=\"flex justify-between items-center\">\n//               <div>\n//                 <button onClick={() => toggleComplete(task._id, task.completed)} className=\"mr-2\">\n//                   {task.completed ? '✓' : '○'}\n//                 </button>\n//                 <span className={task.completed ? 'line-through' : ''}>{task.description}</span>\n//               </div>\n//               <div className=\"actions flex\">\n//                 <button onClick={() => startEditing(task)} className=\"ml-2\">\n//                   <PencilIcon className=\"h-5 w-5 text-blue-500\" />\n//                 </button>\n//                 <button onClick={() => deleteTask(task._id)} className=\"ml-2\">\n//                   <TrashIcon className=\"h-5 w-5 text-red-500\" />\n//                 </button>\n//               </div>\n//             </div>\n//             {editingTask && editingTask._id === task._id && (\n//               <form onSubmit={updateTask} className=\"mt-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={editingTask.description}\n//                   onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}\n//                   className=\"p-1 border rounded w-full\"\n//                 />\n//                 <button type=\"submit\" className=\"mt-1 bg-green-500 text-white p-1 rounded\">Save Changes</button>\n//                 <button onClick={() => setEditingTask(null)} className=\"mt-1 ml-1 bg-gray-500 text-white p-1 rounded\">Cancel</button>\n//               </form>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","newTask","setNewTask","fetchTasks","response","get","data","reverse","error","console","addTask","e","preventDefault","trim","post","description","toggleComplete","id","completed","patch","deleteTask","taskId","delete","editTask","newDescription","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","map","task","onClick","_id","prompt","_c","$RefreshReg$"],"sources":["/home/morpole/Desktop/todo/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';  // Don't forget to import axios\nimport './App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  // Define the fetchTasks function outside of useEffect so it can be reused\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get('/api/tasks');\n      setTasks(response.data.reverse());\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Fetch tasks when the component mounts\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const addTask = async (e) => {\n    e.preventDefault();\n    if (!newTask.trim()) return;\n    try {\n      await axios.post('/api/tasks', { description: newTask });\n      setNewTask('');  // Clear the input after adding a new task\n      fetchTasks();  // Refresh the task list after adding a new one\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  const toggleComplete = async (id, completed) => {\n    try {\n      await axios.patch(`/api/tasks/${id}`, { completed: !completed });\n      fetchTasks();  // Refresh the task list after toggling completion\n    } catch (error) {\n      console.error('Error toggling task completion:', error);\n    }\n  };\n\n  const deleteTask = async (taskId) => {\n    try {\n      await axios.delete(`/api/tasks/${taskId}`);\n      fetchTasks();  // Refresh the task list after deleting\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  const editTask = async (id, newDescription) => {\n    try {\n      await axios.patch(`/api/tasks/${id}`, { description: newDescription });\n      fetchTasks();  // Refresh the task list after editing\n    } catch (error) {\n      console.error('Error editing task:', error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Todo App</h1>\n      <form onSubmit={addTask}>\n        <input\n          type=\"text\"\n          value={newTask}\n          onChange={(e) => setNewTask(e.target.value)}\n          placeholder=\"Add a new task\"\n        />\n        <button type=\"submit\">Add Task</button>\n      </form>\n      <ul>\n        {tasks.map((task) => (\n          <li key={task._id}> {/* Make sure to use _id as your key if your task objects have _id */}\n            <button onClick={() => toggleComplete(task._id, task.completed)}>\n              {task.completed ? '✓' : '○'}\n            </button>\n            <span className={task.completed ? 'completed' : ''}>{task.description}</span>\n            <div className=\"actions\">\n              <button onClick={() => editTask(task._id, prompt('Edit task:', task.description))}>Edit</button>\n              <button onClick={() => deleteTask(task._id)}>Delete</button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import { PencilIcon, TrashIcon } from '@heroicons/react/24/solid'; // Import Heroicons\n// import './App.css';\n\n// function App() {\n//   const [tasks, setTasks] = useState([]);\n//   const [newTask, setNewTask] = useState('');\n//   const [editingTask, setEditingTask] = useState(null);\n\n//   useEffect(() => {\n//     const fetchTasks = async () => {\n//       try {\n//         const response = await axios.get('/api/tasks');\n//         setTasks(response.data.reverse());\n//       } catch (error) {\n//         console.error('Error fetching tasks:', error);\n//       }\n//     };\n\n//     fetchTasks();\n//   }, []);\n\n//   const addTask = async (e) => {\n//     e.preventDefault();\n//     if (!newTask.trim()) return;\n//     try {\n//       await axios.post('/api/tasks', { description: newTask });\n//       setNewTask('');\n//       fetchTasks(); // Refresh task list after adding a new one\n//     } catch (error) {\n//       console.error('Error adding task:', error);\n//     }\n//   };\n\n//   const toggleComplete = async (id, completed) => {\n//     try {\n//       await axios.patch(`/api/tasks/${id}`, { completed: !completed });\n//       fetchTasks(); // Refresh task list after toggling complete status\n//     } catch (error) {\n//       console.error('Error toggling task:', error);\n//     }\n//   };\n\n//   const deleteTask = async (taskId) => {\n//     try {\n//       await axios.delete(`/api/tasks/${taskId}`);\n//       fetchTasks(); // Refresh task list after deleting\n//     } catch (error) {\n//       console.error('Error deleting task:', error);\n//     }\n//   };\n\n//   const startEditing = (task) => {\n//     setEditingTask({ ...task });\n//   };\n\n//   const updateTask = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.patch(`/api/tasks/${editingTask._id}`, { description: editingTask.description });\n//       setEditingTask(null);\n//       fetchTasks(); // Refresh task list after editing\n//     } catch (error) {\n//       console.error('Error updating task:', error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"container mx-auto p-4 max-w-2xl\">\n//       <h1 className=\"text-2xl font-bold mb-4\">Todo App</h1>\n//       <form onSubmit={addTask} className=\"mb-4\">\n//         <input\n//           type=\"text\"\n//           value={newTask}\n//           onChange={(e) => setNewTask(e.target.value)}\n//           placeholder=\"Add a new task\"\n//           className=\"p-2 border rounded w-full\"\n//         />\n//         <button type=\"submit\" className=\"mt-2 button-submit text-white p-2 rounded\">Add Task</button>\n//       </form>\n//       <ul>\n//         {tasks.map((task) => (\n//           <li key={task._id} className=\"mb-2 p-2 border rounded\">\n//             <div className=\"flex justify-between items-center\">\n//               <div>\n//                 <button onClick={() => toggleComplete(task._id, task.completed)} className=\"mr-2\">\n//                   {task.completed ? '✓' : '○'}\n//                 </button>\n//                 <span className={task.completed ? 'line-through' : ''}>{task.description}</span>\n//               </div>\n//               <div className=\"actions flex\">\n//                 <button onClick={() => startEditing(task)} className=\"ml-2\">\n//                   <PencilIcon className=\"h-5 w-5 text-blue-500\" />\n//                 </button>\n//                 <button onClick={() => deleteTask(task._id)} className=\"ml-2\">\n//                   <TrashIcon className=\"h-5 w-5 text-red-500\" />\n//                 </button>\n//               </div>\n//             </div>\n//             {editingTask && editingTask._id === task._id && (\n//               <form onSubmit={updateTask} className=\"mt-2\">\n//                 <input\n//                   type=\"text\"\n//                   value={editingTask.description}\n//                   onChange={(e) => setEditingTask({ ...editingTask, description: e.target.value })}\n//                   className=\"p-1 border rounded w-full\"\n//                 />\n//                 <button type=\"submit\" className=\"mt-1 bg-green-500 text-white p-1 rounded\">Save Changes</button>\n//                 <button onClick={() => setEditingTask(null)} className=\"mt-1 ml-1 bg-gray-500 text-white p-1 rounded\">Cancel</button>\n//               </form>\n//             )}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}